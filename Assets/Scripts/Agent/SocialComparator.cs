using UnityEngine;

/// <summary>
/// Simulates social learning by comparing the agent's emotional decisions
/// against a perfect, rational path provided by a Pathfinder.
/// It generates emotions based on the divergence between the two.
/// </summary>
public class SocialComparator : MonoBehaviour
{
    private EmotionalCore emotionalCore;
    private Pathfinder pathfinder;

    [Header("Social Learning Tuning")]
    [Tooltip("Angle of divergence that starts to trigger curiosity.")]
    public float curiosityDivergenceAngle = 20f;
    [Tooltip("Angle of divergence that triggers frustration.")]
    public float frustrationDivergenceAngle = 60f;

    [Tooltip("Amount of satisfaction gained when aligning with the optimal path.")]
    public float alignmentSatisfaction = 5f;
    [Tooltip("Amount of curiosity generated by minor deviations.")]
    public float deviationCuriosity = 10f;
    [Tooltip("Amount of frustration from major deviations.")]
    public float deviationFrustration = 15f;

    void Awake()
    {
        emotionalCore = GetComponent<EmotionalCore>();
        pathfinder = GetComponent<Pathfinder>();
    }

    /// <summary>
    /// Compares the agent's chosen direction with the optimal path and triggers emotions.
    /// </summary>
    public void ComparePaths(Vector3 agentDecision)
    {
        if (pathfinder == null || emotionalCore == null) return;

        Vector3 optimalDirection = pathfinder.GetOptimalPathDirection();

        if (agentDecision.sqrMagnitude < 0.1f || optimalDirection.sqrMagnitude < 0.1f) return; // Not enough data to compare

        float divergenceAngle = Vector3.Angle(agentDecision, optimalDirection);

        // Based on the angle, trigger different emotions
        if (divergenceAngle > frustrationDivergenceAngle)
        { 
            emotionalCore.TriggerEmotionalEvent("frustration", deviationFrustration * Time.deltaTime);
        }
        else if (divergenceAngle > curiosityDivergenceAngle)
        {
            emotionalCore.TriggerEmotionalEvent("curiosity", deviationCuriosity * Time.deltaTime);
        }
        else
        {
            // Agent is in alignment with the optimal path
            emotionalCore.TriggerEmotionalEvent("satisfaction", alignmentSatisfaction * Time.deltaTime);
        }
    }
}
